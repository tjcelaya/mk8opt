#!/usr/bin/env ruby
require 'csv'

class Hash
    def +(otherHash)
        unless self.keys.sort == otherHash.keys.sort
            raise ArgumentError, "Keys must match" 
        end
        

        result = {}
        self.keys.each do |k|
            if k == 'Name'
                result[k] = self[k] + "," + otherHash[k]
            elsif self[k].class == Hash
                self[k] = self[k] + otherHash[k]
            else
                result[k] = Float(self[k]) + Float(otherHash[k])
            end
        end
        result
    end

    def score(*ks)
        unless ks.sort.all? { |k| self.keys.member? k }
            $stderr.puts(ks)

            raise ArgumentError, "Missing key"
        end

        if ks.length == 1 then return self[ks[0]] end

        #reduce (init, method_sym)
        sum = self.values_at(*ks).reduce(0.0, :+)

        avg =  sum / ks.length

        #reduce (init) {|memo, val| block } 
        squared_distances = self.values_at(*ks).reduce(0.0) do |m, v|
            m + (v - avg) * (v - avg)
        end
        standard_deviation = Math.sqrt(squared_distances/Float(ks.length))
        (sum ** 2) / (1 + standard_deviation ** 2)
    end
end

chars = []
vehicles = []
wheels = []
chars_vehicles_wheels = []


{'MK8C.csv' => chars,
 'MK8V.csv' => vehicles,
 'MK8W.csv' => wheels}.each_pair do |file, var|
    CSV.foreach(file, {:headers => true}) { |l| var << l.to_hash }
end

NAME_KEY = "Name"
ACTUAL_STATS = chars.first.keys - [NAME_KEY]
sort_key = ""

chars.each do |c|
    vehicles.each do |v|
        wheels.each do |w|
            chars_vehicles_wheels << c + v + w
        end
    end
end

chars_vehicles_wheels.uniq! { |x| x.values_at(*ACTUAL_STATS).join ',' }

output = CSV.generate '', {:headers=>true} do |csv|
	csv << chars_vehicles_wheels.first.keys
	chars_vehicles_wheels.each { |r| csv << r.values }
end

File.open('joined.csv', 'w') { |f| f.write output }
