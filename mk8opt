#!/usr/bin/env ruby
require 'csv'

if ARGV.first == '-h'
    puts %{ usage: ./mk8opt [s a w h t m]
        s - Speed
        a - Acceleration
        w - Weight
        h - Handling
        t - Traction
        m - Mini-Turbo
    }
    exit 0
end

if ARGV.first == '-p'
    no_headers = true
    ARGV.shift
end

if ARGV.first == '-r'
    reverse = true
    ARGV.shift
end

COLUMN_WIDTH_FIRST = 40
COLUMN_WIDTH_REST = 9
FORMAT_STRING_LEFT = "%-#{COLUMN_WIDTH_FIRST}.#{COLUMN_WIDTH_FIRST}s#{" %-#{COLUMN_WIDTH_REST}.#{COLUMN_WIDTH_REST}s" * 7} |Score"
# FORMAT_STRING_RIGHT = "%-#{COLUMN_WIDTH_FIRST}.#{COLUMN_WIDTH_FIRST}s#{" %#{COLUMN_WIDTH_REST}.#{COLUMN_WIDTH_REST}s" * 7} |%4.4s"
FORMAT_STRING_RIGHT = "%-#{COLUMN_WIDTH_FIRST}.#{COLUMN_WIDTH_FIRST}s#{" %#{COLUMN_WIDTH_REST}.#{COLUMN_WIDTH_REST}s" * 7} |%4.4s"

ARGV.map! do |arg|
    case arg[0].downcase
    when 's'
        'Speed'
    when 'a'
        'Acceleration'
    when 'w'
        'Weight'
    when 'h'
        'Handling'
    when 't'
        'Traction'
    when 'm'
        'Mini-Turbo'
    end
end

class Hash
    def score(*ks)
        unless ks.sort.all? { |k| self.keys.member? k }
            $stderr.puts(ks)

            raise ArgumentError, "Missing key"
        end

        if ks.length == 1 then return self[ks[0]] end

        #reduce (init, method_sym)
        sum = self.values_at(*ks).reduce(0.0, :+)

        avg =  sum / ks.length

        #reduce (init) {|memo, val| block } 
        squared_distances = self.values_at(*ks).reduce(0.0) do |m, v|
            m + (v - avg) * (v - avg)
        end
        standard_deviation = Math.sqrt(squared_distances/Float(ks.length))
        (sum ** 2) / (1 + standard_deviation ** 2)
    end
end

chars_vehicles_wheels = []

CSV.foreach 'joined.csv', {:headers=>true, :converters=>:float} do |l| 
    chars_vehicles_wheels << l.to_hash
end

NAME_KEY = "Name"
ACTUAL_STATS = chars_vehicles_wheels.first.keys - [NAME_KEY]

sort_key = ARGV

puts FORMAT_STRING_LEFT % ([NAME_KEY] + ACTUAL_STATS) unless no_headers

do_reverse = reverse ? 1 : -1

puts chars_vehicles_wheels
    .sort   { |x,y| (x.score(*sort_key) <=> y.score(*sort_key))*do_reverse }
    .uniq   { |x| x.values_at(*ACTUAL_STATS).join ',' }
    .map    { |l| FORMAT_STRING_RIGHT % (l.values << l.score(*sort_key)) }

puts FORMAT_STRING_LEFT % ([NAME_KEY] + ACTUAL_STATS) unless no_headers

