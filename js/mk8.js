// Generated by CoffeeScript 1.7.1
(function() {
  'use strict';
  var L, boxen, halptaxt, score, stats,
    __slice = [].slice;

  L = function() {
    var things;
    things = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return console.log.apply(console, things);
  };

  boxen = document.querySelectorAll('form input');

  halptaxt = document.querySelector('#halptaxt');

  stats = document.querySelectorAll('.stat');

  score = function(combo, keys) {
    var avg_of_vals, calculate_deviations, deviations, k, sum, vals, _i, _len;
    if (keys.length === 0) {
      return 0;
    }
    vals = [];
    sum = 0;
    for (_i = 0, _len = keys.length; _i < _len; _i++) {
      k = keys[_i];
      if (k === "Handling" || k === "Speed") {
        if (combo[k]["avg"] === void 0) {
          combo[k]["avg"] = (combo[k]["Ground"] + combo[k]["Air"] + combo[k]["Water"] + combo[k]["Anti-Gravity"]) / 4;
        }
        sum += combo[k]["avg"];
        vals.push(combo[k]["avg"]);
      } else if (k === "Acceleration") {
        sum += Math.floor(combo[k]);
        vals.push(Math.floor(combo[k]));
      } else {
        sum += combo[k];
        vals.push(combo[k]);
      }
    }
    if (!(keys.length > 1)) {
      return sum;
    }
    avg_of_vals = (vals.reduce(function(a, b) {
      return a + b;
    })) / keys.length;
    calculate_deviations = function(a, b) {
      return a + Math.pow(b - avg_of_vals, 2);
    };
    deviations = vals.reduce(calculate_deviations, 0);
    return (Math.pow(sum, 2)) / (1 + Math.pow(deviations, 2));
  };

  d3.json('combined.json', function(err, json_data) {
    var rows;
    if (err) {
      L(err);
      throw new Error('Error getting data');
    }
    rows = d3.select('#listing').selectAll('div').data(d3.entries(json_data)).enter().append('div').html(function(d, i) {
      var c, char_images, space_regex, t, tire_images, v, vehicle_images, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
      char_images = [];
      vehicle_images = [];
      tire_images = [];
      space_regex = / /g;
      _ref = d.value.Options[0];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        c = _ref[_i];
        char_images.push("<img title='" + c + "' alt='" + c + "' src='img/" + (c.replace(space_regex, '').replace('.', '')) + ".png' height='64px' width='64px'/>");
      }
      _ref1 = d.value.Options[1];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        v = _ref1[_j];
        vehicle_images.push("<img title='" + v + "' alt='" + v + "' src='img/" + (v.replace(space_regex, '').replace('.', '')) + "Body.png' height='64px' width='100px'/>");
      }
      _ref2 = d.value.Options[2];
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        t = _ref2[_k];
        tire_images.push("<img title='" + t + "' alt='" + t + "' src='img/" + (t.replace(space_regex, '').replace('.', '')) + "Tires.png' height='64px' width='100px'/>");
      }
      return "<div style='visibility:hidden' class='combo'>" + d.key + "</div>\n<div class='opts'>\n  <div class='opt charopts'>" + (char_images.join("")) + "</div>\n  <div class='opt vehicleopts'>" + (vehicle_images.join("")) + "</div>\n  <div class='opt wheelsopts'>" + (tire_images.join("")) + "</div>\n  <hr/>\n</div>\n<div style='display:none' class='optnames'>\n  <div class='opt charopts'><p>" + (d.value.Options[0].join("</p><p>")) + "</p></div>\n  <div class='opt vehicleopts'><p>" + (d.value.Options[1].join("</p><p>")) + "</p></div>\n  <div class='opt wheelsopts'><p>" + (d.value.Options[2].join("</p><p>")) + "</p></div>\n  <hr/>\n</div>\n<table class='stat'>\n  <thead>\n    <tr>\n        <th colspan='4'>Speed</th>\n        <th>Acceleration</th>\n        <th>Weight</th>\n        <th colspan='4'>Handling</th>\n        <th>Traction</th>\n        <th>Mini-Turbo</th>\n    </tr>\n    <tr>\n        <th>Ground</th>\n        <th>Water</th>\n        <th>Air</th>\n        <th>Anti-Gravity</th>\n        <th></th>\n        <th></th>\n        <th>Ground</th>\n        <th>Water</th>\n        <th>Air</th>\n        <th>Anti-Gravity</th>\n        <th></th>\n        <th></th>\n    </tr>\n  </thead>\n  <tr>\n  <td>" + d.value.Speed.Ground + "</td>\n  <td>" + d.value.Speed.Water + "</td>\n  <td>" + d.value.Speed.Air + "</td>\n  <td>" + d.value.Speed["Anti-Gravity"] + "</td>\n  <td>" + d.value.Acceleration + "</td>\n  <td>" + d.value.Weight + "</td>\n  <td>" + d.value.Handling.Ground + "</td>\n  <td>" + d.value.Handling.Water + "</td>\n  <td>" + d.value.Handling.Air + "</td>\n  <td>" + d.value.Handling["Anti-Gravity"] + "</td>\n  <td>" + d.value.Traction + "</td>\n  <td>" + d.value["Mini-Turbo"] + "</td>\n  </tr>\n</table>\n<br style='clear:both';/>";
    }).classed('row', true).each(function(d, i) {
      return this.addEventListener('click', function(e) {
        L(this.childNodes);
        if ('true' === this.getAttribute('data-toggle')) {
          this.setAttribute('data-toggle', 'false');
          this.querySelector('.optnames').setAttribute('style', 'display: none');
          return this.querySelector('.stat').removeAttribute('style');
        } else {
          this.setAttribute('data-toggle', 'true');
          this.querySelector('.optnames').setAttribute('style', 'display: block');
          return this.querySelector('.stat').setAttribute('style', 'opacity: 1');
        }
      });
    });
    return d3.selectAll('form input').data(d3.entries(json_data)).on('click', function(c) {
      var b, sorting_by, _i, _len;
      sorting_by = [];
      for (_i = 0, _len = boxen.length; _i < _len; _i++) {
        b = boxen[_i];
        if (b.checked === true) {
          switch (b.name) {
            case 's':
              sorting_by.push("Speed");
              break;
            case 'a':
              sorting_by.push("Acceleration");
              break;
            case 'w':
              sorting_by.push("Weight");
              break;
            case 'h':
              sorting_by.push("Handling");
              break;
            case 't':
              sorting_by.push("Traction");
              break;
            case 'm':
              sorting_by.push("Mini-Turbo");
          }
        }
      }
      if (sorting_by.length === 0) {
        return;
      }
      return d3.selectAll('.row').sort(function(a, b) {
        return score(b.value, sorting_by) - score(a.value, sorting_by);
      });
    });
  });

  document.querySelector('#halp').addEventListener('click', function(e) {
    if ('false' === this.getAttribute('data-toggle')) {
      this.setAttribute('data-toggle', 'true');
      return halptaxt.setAttribute('style', 'display:block');
    } else {
      this.setAttribute('data-toggle', 'false');
      return halptaxt.setAttribute('style', 'display:none');
    }
  });

}).call(this);

//# sourceMappingURL=mk8.map
